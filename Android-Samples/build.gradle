apply plugin: 'com.android.application'
apply from: '../build-tools/nexus.gradle'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.skype.android.mobilesdk.testapp"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
        local {
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile project(':MobileSdk')

    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4'
    // Set this dependency to build and run Espresso tests
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    // Set this dependency to build and run UI Automator tests
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def getArtifactPath(String variant) {
    return "build/outputs/apk/${project.name}-debug.apk"
}

group = "com.skype.android.skype-android-sdk"                               // Maven Group ID for the artifact

publishing {
    if (project.getGradle().startParameter.taskNames.contains("buildDebug")) {
        publications {
            maven(MavenPublication) {
                groupId group
                artifactId "${project.name}"
                artifact getArtifactPath()
                artifact(javadocJar) {
                    classifier "javadoc"
                }
                version "${buildVersion}"
            }
        }

        repositories {
            maven {
                url "https://nexus.skype.net/content/repositories/skype"
                credentials {
                    username project.getProperty('nexus.user')
                    password project.getProperty('nexus.passwd')
                }
            }
        }
    } else if (project.getGradle().startParameter.taskNames.contains("buildLocal")) {
        println('LOCAL')
        publications {
            maven(MavenPublication) {
                groupId group
                artifactId "${project.name}"
                artifact getArtifactPath()
                artifact(javadocJar) {
                    classifier "javadoc"
                }
                version '0.0'
            }
        }
        repositories {
            maven {
                url "file://${buildDir}/outputs/"
            }
        }
    }
}

task buildLocal(dependsOn: ['assembleDebug', 'publish'])

task buildDebug(dependsOn: ['assembleDebug', 'publish'])

task buildRelease(dependsOn: ['assembleRelease', 'bintrayUpload'])
